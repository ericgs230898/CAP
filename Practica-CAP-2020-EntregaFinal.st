Object subclass: #BT	instanceVariableNames: 'continuationQueue'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica-CAP-2020'!!BT commentStamp: 'jjddpp 11/18/2020 20:28' prior: 0!Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.Cal completar el mètode  'try:'Teniu diversos exemples del seu ús  a l'enunciat!!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 08:28'!with: finalBlock	continuationQueue := OrderedCollection with: finalBlock.! !!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 07:42'!next	^ self try: #()! !!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 07:42'!assert: aBoolean	aBoolean ifFalse: [self next]! !!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 08:28'!initialize	continuationQueue := OrderedCollection with: [ nil ].! !!BT methodsFor: 'private parsing' stamp: 'egs 1/18/2021 11:10'!try: aCollection	| aCollectionCopy cc |	aCollectionCopy := aCollection asOrderedCollection.	cc := Continuation callcc: [ :k | k ].	aCollectionCopy isEmpty 		ifFalse: [| aCollectionFirst |				aCollectionFirst := aCollectionCopy first. continuationQueue add: cc. aCollectionCopy removeFirst. ^ aCollectionFirst ]		ifTrue: [ |element|  element := continuationQueue last. continuationQueue removeLast. element value: element].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BT class	instanceVariableNames: ''!!BT class methodsFor: 'instance creation' stamp: 'jjddpp 11/18/2020 07:42'!with: finalBlock	^ (self new) with: finalBlock! !Object subclass: #NQueens	instanceVariableNames: 'parametre'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica-CAP-2020'!!NQueens commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	parametre:		<Object>    Implementation Points!!NQueens methodsFor: 'instance creation' stamp: 'egs 1/16/2021 15:14'!with: finalBlock	parametre := finalBlock! !!NQueens methodsFor: 'instance creation' stamp: 'egs 1/18/2021 12:28'!solve	| vec bt |	vec := OrderedCollection new: parametre withAll: nil.	bt := BT with: [ nil ].	"Inicialització del vector de trys"	1 to: parametre do: [ :i | vec at: i put: (bt try: (1 to: parametre ) asArray) ].	"Comprovació de les posicions legals"	1 to: parametre do: [ :i | 1 to: i do:[ :j |			i ~= j			ifTrue: [bt assert: (vec at: i) ~= (vec at: j).						bt assert: ((vec at: i)-i) ~= ((vec at: j)-j).						bt assert: ((vec at: i)+i) ~= ((vec at: j)+j).		 	]]].	^ vec.! !!NQueens methodsFor: 'as yet unclassified' stamp: 'egs 1/18/2021 12:22'!solveAll	| vec bt |	vec := OrderedCollection new: parametre withAll: nil.		bt := BT with: [ nil ].	"Inicialització del vector de try"	1 to: parametre do: [ :i | vec at: i put: (bt try: (1 to: parametre ) asArray) ].	"Comprovació de no repetició a la fila"	1 to: parametre do: [ :i | 1 to: i do:[ :j |			i ~= j			ifTrue: [bt assert: (vec at: i) ~= (vec at: j).						bt assert: ((vec at: i)-i) ~= ((vec at: j)-j).						bt assert: ((vec at: i)+i) ~= ((vec at: j)+j).		 	]]].	vec asString traceCr.	bt next.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NQueens class	instanceVariableNames: ''!!NQueens class methodsFor: 'accessing' stamp: 'egs 1/16/2021 15:14'!with: finalBlock	^ (self new) with: finalBlock! !